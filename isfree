#!/bin/bash

#This script is intended to find out whether there is non-free/libre software in your Arch 
#+Linux machine, and, if any, to suggest a free alternative. It uses Parabola's blacklists 
#+to perform the tests.

#Blacklists may be found in: 
#  https://git.parabola.nu/blacklist.git/plain/blacklist.txt 
#or, for the AUR blacklist: 
#  https://git.parabola.nu/blacklist.git/plain/aur-blacklist.txt
#or, for the privacy blacklist:
#  https://git.parabola.nu/blacklist.git/plain/your-privacy-blacklist.txt

#Note: GitHub (https://github.com/duckinator/check-free.git) has a script called 'check-free' 
#+(written by Nick Marwell (duckinator)), which is intended to do the same thing this script 
#+does. However, I'm not sure whether it works so fine, since it only recognizes -provided my 
#+script does the job well, only 6 of MY 33 non-free packages.

#More Parabola's blacklists:
#emulator-blacklist: https://git.parabola.nu/blacklist.git/plain/your-freedom_emu-blacklist.txt

#A whitelist of GNU approved (free) software could be found here: 
#http://www.gnu.org/software/
#Parsed whitelist:
#mapfile -t gnu_whitelist < <(curl -s http://www.gnu.org/software/ | sed -n '/File generated by/,/End file generated by/p' | sed -e 's/<[^>]*>//g' | sed 's/\&nbsp\;//g')

#A list of free software ordered by categories is available at:
#http://directory.fsf.org/wiki/Main_Page

#NOTE: at the moment I use 'calc' for a few floating point operations.

###COLORS###
white="\033[1;37m"
red="\033[1;31m"
yellow="\033[1;33m"
green="\033[1;32m"
cyan="\033[1;36m"
blue="\033[1;34m"
magenta="\033[1;35m"
#d_red="\033[0;31m"
d_yellow="\033[0;33m"
#d_cyan="\033[0;36m"
#d_green="\033[0;32m"
nc="\033[0m"

prog_name="IsFree"
version="0.8-2"
date="Feb, 2018"

OFFICIAL_BLACKLIST="https://git.parabola.nu/blacklist.git/plain/blacklist.txt"
AUR_BLACKLIST="https://git.parabola.nu/blacklist.git/plain/aur-blacklist.txt"
PRIVACY_BLACKLIST="https://git.parabola.nu/blacklist.git/plain/your-privacy-blacklist.txt"
LIBRE_REPO="http://mirror.fsf.org/parabola/libre/os/$(uname -m)/libre.db"

###FUNCTIONS###
function get_blacklist ()
{
	if ! [[ -f $tmp_file ]]; then
		case $1 in
			aur)
				echo -ne "${green}==> ${nc}Downloading Parabola's AUR blacklist... "
				curl -s $AUR_BLACKLIST | sed 's/  //g' > $tmp_file
			;;
			privacy)
				echo -ne "${green}==> ${nc}Downloading Parabola's privacy blacklist... "
				curl -s $PRIVACY_BLACKLIST | sed 's/  //g' > $tmp_file
			;;
			*)
				echo -ne "${green}==> ${nc}Downloading Parabola's blacklist... "
				curl -s $OFFICIAL_BLACKLIST | sed 's/  //g' > $tmp_file
			;;
		esac
		[[ $? -eq 0 ]] && echo -e "${green}OK$nc" || (echo "Error downloading file" && exit 0)
	fi
	while read line; do
		blacklist[${#blacklist[@]}]=$line
	done < $tmp_file
}

function blacklist_line ()
{
	export GREP_COLOR='1;36'
	pack=$1; counter=$2;
	bl_line=$(grep "^${pack}:" $tmp_file)
	case $bl_line in
		*\[technical\]*|*\[branding\]*|*\[recommends-nonfree\]*|points\ to\ nonfree) echo -ne "${white}$counter$nc - ${green}${pack}: $nc" && technical=$((technical+1));;
		*\[nonfree\]*) echo -ne "${white}$counter$nc - ${red}${pack}: $nc" && nonfree=$((nonfree+1));;
		*\[semifree\]*|*\[uses-nonfree\]*) echo -ne "${white}$counter$nc - ${yellow}${pack}: $nc" && semifree=$((semifree+1));;
		*\[FIXME*) echo -ne "${white}$counter$nc - ${white}${pack}: $nc" && fix_doc=$((fix_doc+1));;
		*) echo -ne "${white}$counter$nc - ${blue}${pack}: $nc\n" && no_desc=$((no_desc+1));;
	esac
#   echo "$bl_line" | grep --color -P '(?<=\[).*(?=\] .?)'
	#this is a very precarious attempt to minimally parse the blacklist, but it works.
	echo "$bl_line" | grep -o "\[.*" | sed 's/::::/ /g'| sed 's/:::/ /g' | grep --color "\[technical\]\|\[nonfree\]\|\[semifree\]\|\[FIXME:description\]\|\[uses-nonfree\]\|\[use-nonfree\]\|\[branding\]\|\[recommends-nonfree\]\|\[trademark-issue\]"
	export GREP_COLOR='0'
}

function color_codes ()
{
	nonfree=$1; semifree=$2; technical=$3; fix_doc=$4; no_desc=$5
	echo -e "\n${white}Color codes:"
	! [[ $nonfree == "0" ]] && echo -e "${red}Red:$nc Totally non-free, closed source code ${white}($nonfree)$nc."
	! [[ $semifree == "0" ]] && echo -e "${yellow}Yellow:$nc Contains or depends on non-free software ${white}($semifree)$nc."
	! [[ $technical == "0" ]] && echo -e "${green}Green:$nc It IS by itself free, but has some technical, branding or \
trademark issue, or simply points somehow to non-free software ${white}($technical)$nc."
	! [[ $fix_doc == "0" ]] && echo -e "${white}White:$nc Package description needs to be corrected ${white}($fix_doc).$nc"
	! [[ $no_desc == "0" ]] && echo -e "${blue}Blue:$nc there is no description of this package in Parabola's blacklist ${white}($no_desc)$nc."
}

function parabola_repo_download ()
{
	if ! [[ -f /tmp/libre_repo.txt ]]; then
		if [[ $(grep "^\[libre\]" /etc/pacman.conf) ]]; then
			echo -ne "${green}==> ${nc}Getting packages from [libre] repo... "
			pacman -Sl libre | awk '{print $2"-"$3}' > /tmp/libre_repo.txt
			[[ $? -eq 0 ]] && echo -e "${green}OK$nc"
			return 0
		fi
		arch="$(uname -m)"
		echo -ne "${green}==> ${nc}Downloading Parabola's repository database... "
		wget -qP /tmp $LIBRE_REPO
		if [ -f /tmp/libre.db ]; then
			echo -e "${green}OK$nc"
		else
			echo "Error downloading file" && exit 0
		fi   
		! [[ -d /tmp/libre ]] && mkdir /tmp/libre
		tar xvfz /tmp/libre.db -C /tmp/libre &>/dev/null
		mapfile -t libre_repo < <(ls /tmp/libre)
		for (( j=0;j<${#libre_repo[@]};j++ )); do
			echo "${libre_repo[$j]}" >> /tmp/libre_repo.txt
		done
	fi
}

function free_alternative ()
{
	pack=$1
	#Get the corresponing line in the blacklist
	bl_line="$(cat $tmp_file | grep "^${pack}:")"
	#If a line is found, get the alternative pkg, if any
	[[ $bl_line ]] && alternative="$(echo $bl_line | cut -d":" -f2)"
	[[ $pack == "firefox" || $pack == "chromium" || $pack == "opera" ]] && alternative="icecat"
	#If a alternative pkg has been found, check the libre repo to find the current version of
	#+of this pkg
	if [[ $alternative ]]; then
		alternative_version="$(cat /tmp/libre_repo.txt | grep -Ee "^${alternative}-[0-9]")"
		if [[ $alternative_version ]]; then
			echo -e "${white}\tFree alternative: $nc${magenta}$alternative_version$nc"
			replacement_counter=$((replacement_counter+1))
		else
			echo -e "${white}\tFree alternative: $nc${d_yellow}$alternative$nc"
		fi
	else
		no_alternative[${#no_alternative[@]}]=${pack}
	fi
}

function help ()
{
	echo -e "\n$prog_name is fundamentally aimed to find out whether there is \
non-free/libre software installed in your Arch Linux system. When non-free software is found, \
$prog_name will suggest a free alternative, if any. \n    The tests are based on Parabola's \
blacklists, which can be found in the following sites: \n- https://git.parabola.nu/blacklist.git/plain/blacklist.txt (blacklisted official Arch packages) \
\n- https://git.parabola.nu/blacklist.git/plain/aur-blacklist.txt (AUR blacklisted packages)\
\n- https://git.parabola.nu/blacklist.git/plain/your-privacy-blacklist.txt (privacy risking packages)."
	echo -e "\n${white}Usage:$nc"
	echo -e "${yellow}./isfree.sh [package_name]$nc (check an individual package)"
	echo -e "${yellow}            -o | --official$nc (scan your system for non-free official \
Arch packages)"
	echo -e "${yellow}            -a | --aur$nc (scan your system for non-free AUR packages)"   
	echo -e "${yellow}            -r | --repo [repo_name]$nc (check an official Arch Linux repo for \
non-free packages)"
	echo -e "${yellow}            -p | --privacy$nc (scan the system for software that, according to \
Parabola, might be compromizing your privacy)"
	echo -e "${yellow}            -lo | --list-official$nc (list all the official Arch Linux \
non-free packages)"
	echo -e "${yellow}            -la | --list-aur$nc (list all the AUR non-free packages)"   
	echo -e "${yellow}            -lp | --list-privacy$nc (list all the privacy threatening software)"
	echo -e "${yellow}            -v | --version$nc (show program version)"
	echo -e "${yellow}            -h | --help$nc (show this help and exit)"
	echo -e "${yellow}            -f $nc('What is Free Software?', by Richard Stallman)"
	echo -e "${cyan}\nNote 1:$nc In case you are interested in a 100% free/libre Linux distribution, \
you may want to take a look at Parabola GNU/Linux-libre, just as to all the remaining distros \
also endorsed by the Free Sowtware Foundation (FSF). As of Febraury, 2018, they are: LAG Linux \
and GNU, Dragora GNU/Linux-Libre, Dynebolic, gNewSense, Guix, Musix GNU+Linux, PureOS, Trisquel, \
and Ututo. See https://www.gnu.org/distros/free-distros.html."
	echo -e "${cyan}Note 2:$nc Some alternative free packages, though not all, unfortunately, \
can be found in the AUR, including the linux-libre kernel.\n"
}

###MAIN####

[[ $# -eq 0 ]] && help && exit 0

case $1 in
	-f) echo -e "Excerpt from ${white}'What is Free Software?'${nc} (by Richard Stallman)
Source: https://www.gnu.org/philosophy/free-sw.html\n
	${cyan}\"Free software\" means software that respects users' freedom and community. Roughly, \
it means that the users have the freedom to run, copy, distribute, study, change and improve the \
software${nc}. Thus, ${cyan}\"free software\" is a matter of liberty, not price${nc}. To understand \
the concept, you should think of ${cyan}\"free\" as in \"free speech\", not as in \"free beer\"${nc}. \
We sometimes call it ${cyan}\"libre software\"${nc}, borrowing the French or Spanish word for \
\"free\" as in freedom, to show we do not mean the software is gratis.
	We campaign for these freedoms because everyone deserves them. With these freedoms, the users \
(both individually and collectively) control the program and what it does for them.${cyan} When \
users don't control the program, we call it a \"nonfree\" or proprietary program. The nonfree \
program controls the users, and the developer controls the program; this makes the program an \
instrument of unjust power${nc}.
	A program is free software if the program's users have the ${yellow}four essential freedoms:$nc

	${yellow}-The freedom to run the program as you wish, for any purpose (freedom 0).
	-The freedom to study how the program works, and change it so it does your computing as you \
wish (freedom 1). Access to the source code is a precondition for this.
	-The freedom to redistribute copies so you can help your neighbor (freedom 2).
	-The freedom to distribute copies of your modified versions to others (freedom 3). By doing \
this you can give the whole community a chance to benefit from your changes. Access to the source \
code is a precondition for this.$nc

	A program is free software if it gives users adequately all of these freedoms. Otherwise, it \
is nonfree. While we can distinguish various nonfree distribution schemes in terms of how far \
they fall short of being free, we consider them all equally unethical (...)\n" && exit 0;;

	-o|--official) 
		tmp_file="/tmp/parabola_bl_official"
		get_blacklist
		parabola_repo_download
		echo -n "Getting installed official packages... "
		inst_packs=( $(pacman -Qqn | grep -v parabola) ) && echo -e "${green}OK$nc" && sleep 1
		echo -e "Non-free installed official packages:${nc}\n" 
		counter=0; fix_doc=0; nonfree=0; semifree=0; technical=0; no_desc=0; replacement_counter=0
		for (( i=0;i<${#inst_packs[@]};i++ )); do
			if [[ $(cat $tmp_file | grep ^"${inst_packs[$i]}": 2> /dev/null) ]]; then
				if ! [[ $(pacman -Qi ${inst_packs[$i]} | grep -A3 Version | grep 'parabola\|gnu\|nonfree\|Libre' 2> /dev/null) ]]; then
					counter=$((counter+1))
					blacklist_line ${inst_packs[$i]} $counter
					free_alternative ${inst_packs[$i]}
				fi
			fi
		done
		[[ $counter -eq 0 ]] && echo -e "\n${green}All your official Arch packages are free\nRMS smiles!$nc" && exit 0
		color_codes $nonfree $semifree $technical $fix_doc $no_desc
		echo -e "\n${cyan}Packages with no free/libre alternatives (yet):$nc"
		for (( i=0;i<${#no_alternative[@]};i++ )); do
			echo -e "${white}$((i+1))$nc - ${no_alternative[$i]}"
		done      
		echo -e "\n-------------"
		total_packs=$(pacman -Qn | wc -l)
		echo -e "Total installed official packages: ${white}$total_packs$nc"
		echo -e "${cyan}Non-free/libre$nc found packages:     ${cyan}$counter ($(calc $counter*100/$total_packs | sed 's/\t//g' | sed 's/~//g' | cut -d"." -f1)% of total packages)$nc"
		echo -e "${magenta}Free/libre$nc alternatives found:     ${magenta}$replacement_counter ($(calc $replacement_counter*100/$counter | sed 's/\t//g' | sed 's/~//g' | cut -d"." -f1)% of non-free/libre packages)$nc"
		echo -e "Free/libre official Arch packages: ${white}$(( (($(pacman -Q | wc -l)-counter)*100) / $(pacman -Q | wc -l) ))%$nc"
		rm -f /tmp/libre.db
		rm -rf /tmp/libre
	;;

	-a|--aur) 
		tmp_file="/tmp/parabola_bl_aur"
		get_blacklist aur
      	parabola_repo_download
		echo -n "Getting installed AUR packages... "
		aur_packs=( $(pacman -Qm | awk '{print $1}') ) && echo -e "${green}OK$nc" && sleep 1
		echo -e "Non-free installed AUR packages:${nc}\n" 
		counter=0; fix_doc=0; nonfree=0; semifree=0; technical=0; no_desc=0
		for (( i=0;i<${#aur_packs[@]};i++ )); do
			if [[ $(cat $tmp_file | grep ^"${aur_packs[$i]}": 2> /dev/null) ]]; then
				counter=$((counter+1))
				blacklist_line ${aur_packs[$i]} $counter
            	free_alternative ${aur_packs[$i]}
			fi
		done
		[[ $counter -eq 0 ]] && echo -e "${green}None! All your AUR packages are free!$nc" && exit 0
		color_codes $nonfree $semifree $technical $fix_doc $no_desc
		echo -e "\n-------------"
		echo -e "Total installed AUR packages:  ${white}$(pacman -Qm | wc -l)$nc"
		echo -e "${cyan}Non-free/libre$nc found packages: ${cyan}${counter}$nc"
	;;

	-r|--repo)
		! [[ $2 ]] && echo -e "You must specify a repository\nUsage: isfree -r [repo_name]\n" && exit 1
		#validate repo
		mapfile repos < <(grep "^\[" /etc/pacman.conf | grep -v options | tr -d '[],')
		[[ ${repos[@]} != *"$2"* ]] && echo "'$2': No such repository" && exit 1
		unset repos
		repo=$2
		[[ $repo == "libre" ]] && sleep 3 && echo -e "${green}$(echo $repo | tr '[:lower:]' '[:upper:]') repository is free from proprietary software!$nc" && exit 0
		repo_packs=( $(pacman -Sql $repo) )
		tmp_file="/tmp/parabola_bl_official"
		get_blacklist
		parabola_repo_download
		echo -e "Non-free packages in ${white}'$repo'$nc repository:${nc}\n"
		counter=0; fix_doc=0; nonfree=0; semifree=0; technical=0; no_desc=0; replacement_counter=0
		for (( i=0;i<${#repo_packs[@]};i++ )); do
			if [[ $(cat $tmp_file | grep ^"${repo_packs[$i]}": 2> /dev/null) ]]; then
				counter=$((counter+1))
				blacklist_line ${repo_packs[$i]} $counter
				free_alternative ${repo_packs[$i]}
			fi
		done
		[[ $counter -eq 0 ]] && echo -e "${green}$(echo $repo | tr '[:lower:]' '[:upper:]') is free from non-free software!$nc" && exit 0
		color_codes $nonfree $semifree $technical $fix_doc $no_desc
		echo -e "\n${cyan}Packages with no free alternatives (yet):$nc"
		for (( i=0;i<${#no_alternative[@]};i++ )); do
			echo -e "${white}$((i+1))$nc - ${no_alternative[$i]}"
		done
		echo -e "\n-------------"
		echo -e "$white$(echo $repo | tr '[:lower:]' '[:upper:]')$nc: ${cyan}$counter/$(pacman -Sl $repo | wc -l)$nc packages are ${cyan}non-free$nc."
		echo -e "${magenta}      $replacement_counter/$counter$nc non-free packages have a ${magenta}free$nc alternative."
		rm -f /tmp/libre.db
		rm -rf /tmp/libre
	;;

	-p|--privacy)
		tmp_file="/tmp/parabola_bl_privacy"
		get_blacklist privacy
		parabola_repo_download
		echo -n "Getting installed packages... "
		packs=( $(pacman -Q | awk '{print $1}') ) && echo -e "${green}OK$nc" && sleep 1
		echo -e "Non-secure packages installed in your system:${nc}\n" 
		counter=0; fix_doc=0; nonfree=0; semifree=0; technical=0; no_desc=0
		for (( i=0;i<${#packs[@]};i++ )); do
			if [[ $(cat $tmp_file | grep ^"${packs[$i]}": 2> /dev/null) ]]; then
				counter=$((counter+1))
				blacklist_line ${packs[$i]} $counter
            	free_alternative ${packs[$i]}
			fi
		done
		[[ $counter -eq 0 ]] && echo -e "${green}None! You're free from privacy risking packages!$nc" && exit 0
		color_codes $nonfree $semifree $technical $fix_doc $no_desc
		echo -e "\n-------------"
		echo -e "${white}${counter}/$(pacman -Q | wc -l)$nc packages might be compromizing your privacy."
	;;

	-h|--help) help;;

	-lo|--list-official) 
		tmp_file="/tmp/parabola_bl_official"
		get_blacklist
		parabola_repo_download
		echo -e "Non-free/libre Arch official packages:\n" && sleep 1.5
		for (( i=0;i<${#blacklist[@]};i++ )); do
			echo -ne "${yellow}$((i+1))$nc - ${cyan}$(echo -e ${blacklist[$i]} | sed 's/#//g' | cut -d":" -f1)$nc"
			echo -e ":$(echo ${blacklist[$i]} | sed 's/#//g' | cut -d":" -f5-10)"
			free_alternative $(echo ${blacklist[$i]} | cut -d":" -f1)
		done
		echo -e "\n${white}Color codes:$nc"
		echo -e "${cyan}Cyan:$nc non-free package"
		echo -e "${magenta}Magenta:$nc free alternative available in Parabola's 'libre' repository"
		echo -e "${d_yellow}Yellow:$nc free alternative only suggested, NOT available in Parabola's 'libre' repository"
	;;

	-la|--list-aur) 
		tmp_file="/tmp/parabola_bl_aur"
		get_blacklist aur
		parabola_repo_download
		echo -e "Non-free/libre AUR packages:\n" && sleep 1.5
		for (( i=0;i<${#blacklist[@]};i++ )); do
			if [[ ${blacklist[$i]} != "" ]]; then
				echo -ne "${yellow}$((i+1))$nc - ${cyan}$(echo -e ${blacklist[$i]} | sed 's/#//g' | cut -d":" -f1)$nc"
				echo -e ":$(echo ${blacklist[$i]} | sed 's/#//g' | cut -d":" -f5-10)"
				free_alternative $(echo ${blacklist[$i]} | cut -d":" -f1)
			fi
		done
		echo -e "\n${white}Color codes:$nc"
		echo -e "${cyan}Cyan:$nc non-free package"
		echo -e "${magenta}Magenta:$nc free alternative available in Parabola's 'libre' repository"
		echo -e "${d_yellow}Yellow:$nc free alternative only suggested, NOT available in Parabola's 'libre' repository"
	;;

	-lp|--list-privacy) 
		tmp_file="/tmp/parabola_bl_privacy"
		get_blacklist privacy
		parabola_repo_download
		echo -e "Privacy threatening software:\n" && sleep 1.5
		for (( i=0;i<${#blacklist[@]};i++ )); do
			echo -ne "${yellow}$((i+1))$nc - ${cyan}$(echo -e ${blacklist[$i]} | sed 's/#//g' | cut -d":" -f1)$nc"
			echo -e ":$(echo ${blacklist[$i]} | sed 's/#//g' | cut -d":" -f5-10)"
			free_alternative $(echo ${blacklist[$i]} | cut -d":" -f1)
		done
		echo -e "\n${white}Color codes:$nc"
		echo -e "${cyan}Cyan:$nc non-free package"
		echo -e "${magenta}Magenta:$nc free alternative available in Parabola's 'libre' repository"
		echo -e "${d_yellow}Yellow:$nc free alternative only suggested, NOT available in Parabola's 'libre' repository"
	;;

	-v|--version)
		echo -e "$prog_name $version ($date), by L. M. Abramovich\n" ;;
   
   #####Check an individual package####
	-*|--*) echo -e "$Error:$nc '$1': invalid argument. Run 'isfree -h' for help." && exit 0;;
	*)
		replacement_counter=0
		pack=$1
		pack="$(echo $pack | tr '[:upper:]' '[:lower:]')"
		if ! [[ $(pacman -Ss ^${pack}) ]]; then
			echo "Error: '$pack' is not an official Arch Linux package" 
			exit 0
		fi
		tmp_file="/tmp/parabola_bl_official"
		get_blacklist
		parabola_repo_download
		if [[ $(cat $tmp_file | grep ^"${pack}":) ]]; then
			echo -ne "${red}$pack is a non-free package$nc\n"
			echo -ne "${white}Description:$nc "
			export GREP_COLOR='1;36'         
			grep "^${pack}:" $tmp_file | grep -o "\[.*" | grep --color "\[technical\]\|\[nonfree\]\|\[semifree\]\|\[FIXME:description\]\|\[uses-nonfree\]\|\[use-nonfree\]\|\[branding\]\|\[recommends-nonfree\]\|\[trademark-issue\]"
			export GREP_COLOR='0'
			free_alternative ${pack}
			[[ $replacement_counter -eq 0 ]] && echo -e "${cyan}    No free/libre alternative for this package (yet).$nc"
		else
			echo -e "${green}'$pack' is totally free software$nc"
		fi
		rm -f /tmp/libre.db
		rm -rf /tmp/libre
		exit 0
	;;
esac
